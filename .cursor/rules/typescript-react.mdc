---
globs: *.tsx,*.ts
description: TypeScript and React development guidelines
---

# TypeScript & React Guidelines

## TypeScript Best Practices

- Always use TypeScript strict mode
- Define proper interfaces for props and data structures
- Use type inference where appropriate, explicit types where necessary
- Prefer `interface` over `type` for object shapes
- Use generic types for reusable components

## React Component Guidelines

- Use functional components with hooks
- Follow the single responsibility principle
- Use proper prop destructuring
- Implement proper error boundaries
- Use React.memo() for performance optimization when needed

## Component Structure

```typescript
interface ComponentProps {
  // Define props interface
}

export function Component({ prop1, prop2 }: ComponentProps) {
  // Component logic
  return (
    // JSX
  );
}
```

## File Naming Conventions

- Components: PascalCase (e.g., `UserProfile.tsx`)
- Utilities: camelCase (e.g., `formatDate.ts`)
- Pages: lowercase with hyphens (e.g., `user-profile/page.tsx`)
- Types: PascalCase with `.types.ts` suffix

## Import Organization

1. React and Next.js imports
2. Third-party library imports
3. Internal component imports
4. Type imports
5. Relative imports

```typescript
import React from 'react';
import { NextPage } from 'next';
import { Button } from '@/components/ui/button';
import { User } from '@/types/user.types';
import './styles.css';
```