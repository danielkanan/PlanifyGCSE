---
description: Animation guidelines using animate-ui library for shadcn/ui components
globs: *.tsx,*.ts,*.jsx,*.js
---

# Animation Guidelines with animate-ui

This project uses [animate-ui](https://animate-ui.com/) for animations, which is specifically designed to work seamlessly with shadcn/ui components.

## Installation

Use the shadcn CLI to add animate-ui components:

```bash
npx shadcn@latest add @animate-ui/components-radix-accordion
npx shadcn@latest add @animate-ui/components-radix-dialog
npx shadcn@latest add @animate-ui/components-radix-dropdown-menu
npx shadcn@latest add @animate-ui/components-radix-popover
npx shadcn@latest add @animate-ui/components-radix-select
npx shadcn@latest add @animate-ui/components-radix-sheet
npx shadcn@latest add @animate-ui/components-radix-tabs
npx shadcn@latest add @animate-ui/components-radix-toast
npx shadcn@latest add @animate-ui/components-radix-tooltip
```

## Usage Patterns

### Basic Animated Component
```tsx
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"

export function AnimatedAccordion() {
  return (
    <Accordion type="single" collapsible>
      <AccordionItem value="item-1">
        <AccordionTrigger>Is it accessible?</AccordionTrigger>
        <AccordionContent>
          Yes. It adheres to the WAI-ARIA design pattern.
        </AccordionContent>
      </AccordionItem>
    </Accordion>
  )
}
```

### Custom Animation Variants
```tsx
import { motion } from "framer-motion"
import { cn } from "@/lib/utils"

const variants = {
  hidden: { opacity: 0, y: 20 },
  visible: { opacity: 1, y: 0 },
  exit: { opacity: 0, y: -20 }
}

export function AnimatedCard({ children, className }: { children: React.ReactNode, className?: string }) {
  return (
    <motion.div
      initial="hidden"
      animate="visible"
      exit="exit"
      variants={variants}
      transition={{ duration: 0.3 }}
      className={cn("rounded-lg border bg-card", className)}
    >
      {children}
    </motion.div>
  )
}
```

## Best Practices

1. **Consistent Timing**: Use consistent animation durations (0.2s, 0.3s, 0.5s)
2. **Easing**: Prefer smooth easing functions like `ease-out` for entrances and `ease-in` for exits
3. **Performance**: Use `transform` and `opacity` properties for smooth animations
4. **Accessibility**: Respect `prefers-reduced-motion` user preference
5. **Component Integration**: Always use animate-ui components instead of regular shadcn components when animations are needed

## Animation Types

- **Entrance**: Fade in, slide up, scale in
- **Exit**: Fade out, slide down, scale out  
- **Hover**: Subtle scale, shadow changes
- **Focus**: Ring animations, color transitions
- **Loading**: Skeleton animations, spinners

## Common Patterns

### Page Transitions
```tsx
import { motion } from "framer-motion"

export function PageTransition({ children }: { children: React.ReactNode }) {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
    >
      {children}
    </motion.div>
  )
}
```

### List Animations
```tsx
import { motion } from "framer-motion"

const container = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1
    }
  }
}

const item = {
  hidden: { opacity: 0, y: 20 },
  visible: { opacity: 1, y: 0 }
}

export function AnimatedList({ items }: { items: string[] }) {
  return (
    <motion.ul
      variants={container}
      initial="hidden"
      animate="visible"
    >
      {items.map((item, index) => (
        <motion.li key={index} variants={item}>
          {item}
        </motion.li>
      ))}
    </motion.ul>
  )
}
```

## Resources

- [animate-ui Documentation](https://animate-ui.com/)
- [Framer Motion Documentation](https://www.framer.com/motion/)
- [shadcn/ui Components](https://ui.shadcn.com/)